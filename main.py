

import json
import base64
import random
import string
from typing import Dict
from cryptography.fernet import Fernet


# ---------- –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ----------
def generate_key() -> bytes:
    return Fernet.generate_key()

def encrypt_password(password: str, key: bytes) -> bytes:
    fernet = Fernet(key)
    return fernet.encrypt(password.encode())

def decrypt_password(encrypted_password: bytes, key: bytes) -> str:
    fernet = Fernet(key)
    return fernet.decrypt(encrypted_password).decode()


# ---------- –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä–æ–ª—è–º–∏ ----------
def generate_random_password(length: int = 12) -> str:
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(characters) for _ in range(length))

def save_passwords(passwords: Dict[str, str], filename: str = "passwords.json") -> None:
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(passwords, f, indent=2)

def load_passwords(filename: str = "passwords.json") -> Dict[str, str]:
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


# ---------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
def main():
    key_file = "secret.key"

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞
    try:
        with open(key_file, 'rb') as f:
            key = f.read()
    except FileNotFoundError:
        key = generate_key()
        with open(key_file, 'wb') as f:
            f.write(key)
        print("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.")

    passwords = load_passwords()

    while True:
        print("\n–ú–µ–Ω—é:")
        print("1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")
        print("2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        print("3. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        print("4. –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == '1':
            site = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞/—Å–µ—Ä–≤–∏—Å–∞: ")
            password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")

            encrypted = encrypt_password(password, key)
            encoded = base64.b64encode(encrypted).decode('utf-8')
            passwords[site] = encoded
            save_passwords(passwords)
            print("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

        elif choice == '2':
            site = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞/—Å–µ—Ä–≤–∏—Å–∞: ")
            if site in passwords:
                encoded = passwords[site]
                encrypted = base64.b64decode(encoded)
                decrypted = decrypt_password(encrypted, key)
                print(f"üîì –ü–∞—Ä–æ–ª—å –¥–ª—è {site}: {decrypted}")
            else:
                print("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        elif choice == '3':
            length = int(input("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è: "))
            generated = generate_random_password(length)
            print(f"üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {generated}")

        elif choice == '4':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        else:
            print("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



if __name__=="__main__":
    main()